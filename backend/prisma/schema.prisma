generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String                @id @default(cuid())
  email                     String?               @unique
  phone                     String?               @unique
  premium                   Boolean               @default(false)
  createdAt                 DateTime              @default(now())
  updatedAt                 DateTime              @updatedAt
  affiliateCode             String                @unique @default(cuid())
  firstName                 String?
  isActive                  Boolean               @default(true)
  isBanned                  Boolean               @default(false)
  isVerified                Boolean               @default(false)
  lastName                  String?
  password                  String
  premiumExpiresAt          DateTime?
  referredBy                String?
  role                      UserRole              @default(USER)
  username                  String                @unique
  verificationBadge         Boolean               @default(false)
  kycStatus                 KycStatus             @default(PENDING)
  referredEarnings          AffiliateEarning[]    @relation("ReferredBy")
  affiliateEarnings         AffiliateEarning[]    @relation("AffiliateEarnings")
  autoSpinOrders            AutoSpinOrder[]
  bets                      Bet[]
  chatMessages              ChatMessage[]
  communitySentiment        CommunitySentiment[]
  internalTransfersReceived InternalTransfer[]    @relation("InternalTransferReceived")
  internalTransfers         InternalTransfer[]
  premiumSubscriptions      PremiumSubscription[]
  spins                     Spin[]
  transactions              Transaction[]
  referrer                  User?                 @relation("UserReferrals", fields: [referredBy], references: [id])
  referrals                 User[]                @relation("UserReferrals")
  userPreferences           UserPreferences?
  wallet                    Wallet?
}

model Wallet {
  userId         String   @unique
  available      Decimal  @default(0) @db.Decimal(18, 2)
  held           Decimal  @default(0) @db.Decimal(18, 2)
  updatedAt      DateTime @updatedAt
  createdAt      DateTime @default(now())
  id             String   @id @default(cuid())
  totalDeposited Decimal  @default(0) @db.Decimal(18, 2)
  totalLost      Decimal  @default(0) @db.Decimal(18, 2)
  totalWithdrawn Decimal  @default(0) @db.Decimal(18, 2)
  totalWon       Decimal  @default(0) @db.Decimal(18, 2)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Transaction {
  id          String            @id @default(cuid())
  userId      String
  type        TransactionType
  amount      Decimal           @db.Decimal(18, 2)
  fee         Decimal           @default(0) @db.Decimal(18, 2)
  status      TransactionStatus @default(PENDING)
  method      String?
  reference   String?           @unique
  description String?
  metadata    Json?
  processedAt DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  user        User              @relation(fields: [userId], references: [id])
}

model Spin {
  id            String          @id @default(cuid())
  userId        String
  betAmount     Decimal         @db.Decimal(18, 2)
  betType       BetType
  volatility    VolatilityType?
  color         ColorType?
  outcome       SpinOutcome
  winAmount     Decimal?        @db.Decimal(18, 2)
  isWin         Boolean
  roundNumber   Int
  countdownTime Int
  isPremiumUser Boolean         @default(false)
  autoSpin      Boolean         @default(false)
  createdAt     DateTime        @default(now())
  completedAt   DateTime?
  user          User            @relation(fields: [userId], references: [id])
}

model AffiliateEarning {
  id             String        @id @default(cuid())
  userId         String
  referredUserId String
  amount         Decimal       @db.Decimal(18, 2)
  tier           AffiliateTier
  date           DateTime      @default(now())
  isPaid         Boolean       @default(false)
  createdAt      DateTime      @default(now())
  referredUser   User          @relation("ReferredBy", fields: [referredUserId], references: [id])
  user           User          @relation("AffiliateEarnings", fields: [userId], references: [id])
}

model PremiumPlan {
  id            String                @id @default(cuid())
  name          String
  duration      Int
  price         Decimal               @db.Decimal(18, 2)
  isActive      Boolean               @default(true)
  features      Json
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  subscriptions PremiumSubscription[]
}

model PremiumSubscription {
  id         String             @id @default(cuid())
  userId     String
  planId     String
  status     SubscriptionStatus @default(ACTIVE)
  startDate  DateTime           @default(now())
  endDate    DateTime
  amountPaid Decimal            @db.Decimal(18, 2)
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  plan       PremiumPlan        @relation(fields: [planId], references: [id])
  user       User               @relation(fields: [userId], references: [id])
}

model InternalTransfer {
  id          String         @id @default(cuid())
  senderId    String
  recipientId String
  amount      Decimal        @db.Decimal(18, 2)
  fee         Decimal        @db.Decimal(18, 2)
  feePayer    FeePayer       @default(SENDER)
  status      TransferStatus @default(PENDING)
  approvedBy  String?
  approvedAt  DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  recipient   User           @relation("InternalTransferReceived", fields: [recipientId], references: [id])
  sender      User           @relation(fields: [senderId], references: [id])
}

model CommunitySentiment {
  id          String        @id @default(cuid())
  userId      String
  sentiment   SentimentType
  confidence  Decimal       @db.Decimal(3, 2)
  roundNumber Int
  createdAt   DateTime      @default(now())
  user        User          @relation(fields: [userId], references: [id])
}

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  isPublic    Boolean  @default(false)
  updatedBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Round {
  id                  String            @id @default(cuid())
  roundNumber         Int               @unique @default(autoincrement())
  state               RoundState        @default(OPEN)
  openedAt            DateTime          @default(now())
  freezeAt            DateTime
  settleAt            DateTime
  settledAt           DateTime?
  roundDuration       Int               @default(1200)
  freezeOffset        Int               @default(60)
  premiumCutoff       Int               @default(5)
  regularCutoff       Int               @default(60)
  outerBuy            Decimal           @default(0) @db.Decimal(18, 2)
  outerSell           Decimal           @default(0) @db.Decimal(18, 2)
  middleBlue          Decimal           @default(0) @db.Decimal(18, 2)
  middleRed           Decimal           @default(0) @db.Decimal(18, 2)
  innerHighVol        Decimal           @default(0) @db.Decimal(18, 2)
  innerLowVol         Decimal           @default(0) @db.Decimal(18, 2)
  globalIndecision    Decimal           @default(0) @db.Decimal(18, 2)
  indecisionTriggered Boolean           @default(false)
  outerWinner         String?
  middleWinner        String?
  innerWinner         String?
  outerTied           Boolean           @default(false)
  middleTied          Boolean           @default(false)
  innerTied           Boolean           @default(false)
  totalHouseFee       Decimal           @default(0) @db.Decimal(18, 2)
  feeBps              Int               @default(200)
  totalVolume         Decimal           @default(0) @db.Decimal(18, 2)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  bets                Bet[]
  artifact            FairnessArtifact?

  @@index([state, freezeAt])
  @@index([state, settleAt])
  @@index([roundNumber])
}

model Bet {
  id             String    @id @default(cuid())
  roundId        String
  userId         String
  market         BetMarket
  selection      String
  amountUsd      Decimal   @db.Decimal(18, 2)
  status         BetStatus @default(ACCEPTED)
  isWinner       Boolean?
  payoutAmount   Decimal?  @db.Decimal(18, 2)
  profitAmount   Decimal?  @db.Decimal(18, 2)
  payoutRatio    Decimal?  @db.Decimal(10, 6)
  isPremiumUser  Boolean   @default(false)
  idempotencyKey String?   @unique
  holdLedgerId   String?
  payoutLedgerId String?
  createdAt      DateTime  @default(now())
  settledAt      DateTime?
  round          Round     @relation(fields: [roundId], references: [id], onDelete: Cascade)
  user           User      @relation(fields: [userId], references: [id])

  @@index([roundId, userId])
  @@index([userId, createdAt])
  @@index([roundId, market, selection])
  @@index([status])
}

model FairnessArtifact {
  id            String    @id @default(cuid())
  roundId       String    @unique
  commitHash    String
  secret        String?
  animationSeed String?
  artifactData  Json
  createdAt     DateTime  @default(now())
  revealedAt    DateTime?
  round         Round     @relation(fields: [roundId], references: [id], onDelete: Cascade)

  @@index([createdAt])
}

model ChatMessage {
  id           String       @id @default(cuid())
  userId       String
  content      String
  roomType     ChatRoomType @default(GENERAL)
  isDeleted    Boolean      @default(false)
  deletedBy    String?
  deletedAt    DateTime?
  deleteReason String?
  ipAddress    String?
  createdAt    DateTime     @default(now())
  user         User         @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([roomType, createdAt])
  @@index([userId, createdAt])
}

model AutoSpinOrder {
  id                String         @id @default(cuid())
  userId            String
  market            BetMarket
  selection         String
  amountUsd         Decimal        @db.Decimal(18, 2)
  status            AutoSpinStatus @default(PENDING)
  roundsRemaining   Int
  roundsExecuted    Int            @default(0)
  targetRoundNumber Int?
  executedForRounds Json
  isActive          Boolean        @default(true)
  expiresAt         DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([status, createdAt])
  @@index([isActive, createdAt])
}

model UserPreferences {
  id                     String   @id @default(cuid())
  userId                 String   @unique
  preferredRoundDuration Int?
  autoSpinEnabled        Boolean  @default(false)
  maxAutoSpinOrders      Int      @default(50)
  emailNotifications     Boolean  @default(true)
  pushNotifications      Boolean  @default(true)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
}

enum KycStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  SPIN_WIN
  SPIN_LOSS
  AFFILIATE_EARNING
  INTERNAL_TRANSFER_SENT
  INTERNAL_TRANSFER_RECEIVED
  PREMIUM_SUBSCRIPTION
  REFUND
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum BetType {
  BUY
  SELL
  HIGH_VOLATILE
  LOW_VOLATILE
  BLUE
  RED
  INDECISION
}

enum VolatilityType {
  HIGH
  LOW
}

enum ColorType {
  BLUE
  RED
}

enum SpinOutcome {
  WIN
  LOSS
  DRAW
}

enum AffiliateTier {
  TIER_1
  TIER_2
  TIER_3
  TIER_4
  TIER_5
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}

enum FeePayer {
  SENDER
  RECIPIENT
}

enum TransferStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum SentimentType {
  BUY
  SELL
  INDECISION
}

enum RoundState {
  OPEN
  FROZEN
  SETTLING
  SETTLED
}

enum BetMarket {
  OUTER
  MIDDLE
  INNER
  GLOBAL
}

enum BetStatus {
  ACCEPTED
  WON
  LOST
  CANCELLED
}

enum ChatRoomType {
  GENERAL
  PREMIUM
  ADMIN
}

enum AutoSpinStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
  EXPIRED
}
